// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Age Gate Form Tests renders the ui as expected 1`] = `
<AgeGateForm
  handleDateChange={[MockFunction]}
  selectedDate={2015-06-14T22:12:05.275Z}
  submitForm={[MockFunction]}
  verifyDate={2015-06-14T22:12:05.275Z}
>
  <MuiPickersUtilsProvider
    utils={[Function]}
  >
    <form
      onSubmit={[Function]}
    >
      <WithStyles(ForwardRef(Grid))
        className="makeStyles-formContainer-5"
        container={true}
      >
        <ForwardRef(Grid)
          className="makeStyles-formContainer-5"
          classes={
            Object {
              "align-content-xs-center": "MuiGrid-align-content-xs-center",
              "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
              "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
              "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
              "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
              "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
              "align-items-xs-center": "MuiGrid-align-items-xs-center",
              "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
              "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
              "container": "MuiGrid-container",
              "direction-xs-column": "MuiGrid-direction-xs-column",
              "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
              "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
              "grid-lg-1": "MuiGrid-grid-lg-1",
              "grid-lg-10": "MuiGrid-grid-lg-10",
              "grid-lg-11": "MuiGrid-grid-lg-11",
              "grid-lg-12": "MuiGrid-grid-lg-12",
              "grid-lg-2": "MuiGrid-grid-lg-2",
              "grid-lg-3": "MuiGrid-grid-lg-3",
              "grid-lg-4": "MuiGrid-grid-lg-4",
              "grid-lg-5": "MuiGrid-grid-lg-5",
              "grid-lg-6": "MuiGrid-grid-lg-6",
              "grid-lg-7": "MuiGrid-grid-lg-7",
              "grid-lg-8": "MuiGrid-grid-lg-8",
              "grid-lg-9": "MuiGrid-grid-lg-9",
              "grid-lg-auto": "MuiGrid-grid-lg-auto",
              "grid-lg-true": "MuiGrid-grid-lg-true",
              "grid-md-1": "MuiGrid-grid-md-1",
              "grid-md-10": "MuiGrid-grid-md-10",
              "grid-md-11": "MuiGrid-grid-md-11",
              "grid-md-12": "MuiGrid-grid-md-12",
              "grid-md-2": "MuiGrid-grid-md-2",
              "grid-md-3": "MuiGrid-grid-md-3",
              "grid-md-4": "MuiGrid-grid-md-4",
              "grid-md-5": "MuiGrid-grid-md-5",
              "grid-md-6": "MuiGrid-grid-md-6",
              "grid-md-7": "MuiGrid-grid-md-7",
              "grid-md-8": "MuiGrid-grid-md-8",
              "grid-md-9": "MuiGrid-grid-md-9",
              "grid-md-auto": "MuiGrid-grid-md-auto",
              "grid-md-true": "MuiGrid-grid-md-true",
              "grid-sm-1": "MuiGrid-grid-sm-1",
              "grid-sm-10": "MuiGrid-grid-sm-10",
              "grid-sm-11": "MuiGrid-grid-sm-11",
              "grid-sm-12": "MuiGrid-grid-sm-12",
              "grid-sm-2": "MuiGrid-grid-sm-2",
              "grid-sm-3": "MuiGrid-grid-sm-3",
              "grid-sm-4": "MuiGrid-grid-sm-4",
              "grid-sm-5": "MuiGrid-grid-sm-5",
              "grid-sm-6": "MuiGrid-grid-sm-6",
              "grid-sm-7": "MuiGrid-grid-sm-7",
              "grid-sm-8": "MuiGrid-grid-sm-8",
              "grid-sm-9": "MuiGrid-grid-sm-9",
              "grid-sm-auto": "MuiGrid-grid-sm-auto",
              "grid-sm-true": "MuiGrid-grid-sm-true",
              "grid-xl-1": "MuiGrid-grid-xl-1",
              "grid-xl-10": "MuiGrid-grid-xl-10",
              "grid-xl-11": "MuiGrid-grid-xl-11",
              "grid-xl-12": "MuiGrid-grid-xl-12",
              "grid-xl-2": "MuiGrid-grid-xl-2",
              "grid-xl-3": "MuiGrid-grid-xl-3",
              "grid-xl-4": "MuiGrid-grid-xl-4",
              "grid-xl-5": "MuiGrid-grid-xl-5",
              "grid-xl-6": "MuiGrid-grid-xl-6",
              "grid-xl-7": "MuiGrid-grid-xl-7",
              "grid-xl-8": "MuiGrid-grid-xl-8",
              "grid-xl-9": "MuiGrid-grid-xl-9",
              "grid-xl-auto": "MuiGrid-grid-xl-auto",
              "grid-xl-true": "MuiGrid-grid-xl-true",
              "grid-xs-1": "MuiGrid-grid-xs-1",
              "grid-xs-10": "MuiGrid-grid-xs-10",
              "grid-xs-11": "MuiGrid-grid-xs-11",
              "grid-xs-12": "MuiGrid-grid-xs-12",
              "grid-xs-2": "MuiGrid-grid-xs-2",
              "grid-xs-3": "MuiGrid-grid-xs-3",
              "grid-xs-4": "MuiGrid-grid-xs-4",
              "grid-xs-5": "MuiGrid-grid-xs-5",
              "grid-xs-6": "MuiGrid-grid-xs-6",
              "grid-xs-7": "MuiGrid-grid-xs-7",
              "grid-xs-8": "MuiGrid-grid-xs-8",
              "grid-xs-9": "MuiGrid-grid-xs-9",
              "grid-xs-auto": "MuiGrid-grid-xs-auto",
              "grid-xs-true": "MuiGrid-grid-xs-true",
              "item": "MuiGrid-item",
              "justify-xs-center": "MuiGrid-justify-xs-center",
              "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
              "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
              "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
              "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
              "root": "MuiGrid-root",
              "spacing-xs-1": "MuiGrid-spacing-xs-1",
              "spacing-xs-10": "MuiGrid-spacing-xs-10",
              "spacing-xs-2": "MuiGrid-spacing-xs-2",
              "spacing-xs-3": "MuiGrid-spacing-xs-3",
              "spacing-xs-4": "MuiGrid-spacing-xs-4",
              "spacing-xs-5": "MuiGrid-spacing-xs-5",
              "spacing-xs-6": "MuiGrid-spacing-xs-6",
              "spacing-xs-7": "MuiGrid-spacing-xs-7",
              "spacing-xs-8": "MuiGrid-spacing-xs-8",
              "spacing-xs-9": "MuiGrid-spacing-xs-9",
              "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
              "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
              "zeroMinWidth": "MuiGrid-zeroMinWidth",
            }
          }
          container={true}
        >
          <div
            className="MuiGrid-root makeStyles-formContainer-5 MuiGrid-container"
          >
            <PickerWithState
              KeyboardButtonProps={
                Object {
                  "aria-label": "change date",
                }
              }
              allowKeyboardControl={true}
              className="makeStyles-picker-6"
              disableFuture={true}
              disableToolbar={true}
              format="MM/dd/yyyy"
              id="date-picker-inline"
              invalidDateMessage="Invalid Date Format"
              label="Enter Your Age"
              margin="normal"
              maxDate={2015-06-14T22:12:05.275Z}
              maxDateMessage="You must be 21 years of age!"
              minDate={1900-01-01T00:00:00.000Z}
              minDateMessage="Date should not be before minimal date"
              onChange={[MockFunction]}
              openTo="date"
              value={2015-06-14T22:12:05.275Z}
              variant="inline"
              views={
                Array [
                  "year",
                  "date",
                ]
              }
            >
              <Wrapper
                DateInputProps={
                  Object {
                    "format": "MM/dd/yyyy",
                    "inputValue": "06/14/2015",
                    "onChange": [Function],
                    "openPicker": [Function],
                    "validationError": "",
                  }
                }
                InputComponent={[Function]}
                KeyboardButtonProps={
                  Object {
                    "aria-label": "change date",
                  }
                }
                className="makeStyles-picker-6"
                format="MM/dd/yyyy"
                id="date-picker-inline"
                label="Enter Your Age"
                margin="normal"
                onAccept={[Function]}
                onClear={[Function]}
                onDismiss={[Function]}
                onSetToday={[Function]}
                open={false}
                variant="inline"
              >
                <InlineWrapper
                  DateInputProps={
                    Object {
                      "format": "MM/dd/yyyy",
                      "inputValue": "06/14/2015",
                      "onChange": [Function],
                      "openPicker": [Function],
                      "validationError": "",
                    }
                  }
                  InputComponent={[Function]}
                  KeyboardButtonProps={
                    Object {
                      "aria-label": "change date",
                    }
                  }
                  className="makeStyles-picker-6"
                  format="MM/dd/yyyy"
                  id="date-picker-inline"
                  label="Enter Your Age"
                  margin="normal"
                  onAccept={[Function]}
                  onClear={[Function]}
                  onDismiss={[Function]}
                  onSetToday={[Function]}
                  open={false}
                >
                  <KeyboardDateInput
                    KeyboardButtonProps={
                      Object {
                        "aria-label": "change date",
                      }
                    }
                    className="makeStyles-picker-6"
                    format="MM/dd/yyyy"
                    id="date-picker-inline"
                    inputRef={
                      Object {
                        "current": <input
                          aria-invalid="false"
                          class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                          id="date-picker-inline"
                          type="text"
                          value="06/14/2015"
                        />,
                      }
                    }
                    inputValue="06/14/2015"
                    keyboardIcon={<KeyboardIcon />}
                    label="Enter Your Age"
                    margin="normal"
                    onChange={[Function]}
                    openPicker={[Function]}
                    validationError=""
                  >
                    <Rifm
                      format={[Function]}
                      key="__/__/____"
                      onChange={[Function]}
                      refuse={/\\[\\^\\\\d\\]\\+/gi}
                      value="06/14/2015"
                    >
                      <WithStyles(ForwardRef(TextField))
                        InputProps={
                          Object {
                            "endAdornment": <ForwardRef(WithStyles)
                              position="end"
                            >
                              <ForwardRef(WithStyles)
                                aria-label="change date"
                                onClick={[Function]}
                              >
                                <KeyboardIcon />
                              </ForwardRef(WithStyles)>
                            </ForwardRef(WithStyles)>,
                          }
                        }
                        className="makeStyles-picker-6"
                        error={false}
                        helperText=""
                        id="date-picker-inline"
                        inputRef={
                          Object {
                            "current": <input
                              aria-invalid="false"
                              class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                              id="date-picker-inline"
                              type="text"
                              value="06/14/2015"
                            />,
                          }
                        }
                        label="Enter Your Age"
                        margin="normal"
                        onChange={[Function]}
                        value="06/14/2015"
                      >
                        <ForwardRef(TextField)
                          InputProps={
                            Object {
                              "endAdornment": <ForwardRef(WithStyles)
                                position="end"
                              >
                                <ForwardRef(WithStyles)
                                  aria-label="change date"
                                  onClick={[Function]}
                                >
                                  <KeyboardIcon />
                                </ForwardRef(WithStyles)>
                              </ForwardRef(WithStyles)>,
                            }
                          }
                          className="makeStyles-picker-6"
                          classes={
                            Object {
                              "root": "MuiTextField-root",
                            }
                          }
                          error={false}
                          helperText=""
                          id="date-picker-inline"
                          inputRef={
                            Object {
                              "current": <input
                                aria-invalid="false"
                                class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                id="date-picker-inline"
                                type="text"
                                value="06/14/2015"
                              />,
                            }
                          }
                          label="Enter Your Age"
                          margin="normal"
                          onChange={[Function]}
                          value="06/14/2015"
                        >
                          <WithStyles(ForwardRef(FormControl))
                            className="MuiTextField-root makeStyles-picker-6"
                            color="primary"
                            disabled={false}
                            error={false}
                            fullWidth={false}
                            margin="normal"
                            required={false}
                            variant="standard"
                          >
                            <ForwardRef(FormControl)
                              className="MuiTextField-root makeStyles-picker-6"
                              classes={
                                Object {
                                  "fullWidth": "MuiFormControl-fullWidth",
                                  "marginDense": "MuiFormControl-marginDense",
                                  "marginNormal": "MuiFormControl-marginNormal",
                                  "root": "MuiFormControl-root",
                                }
                              }
                              color="primary"
                              disabled={false}
                              error={false}
                              fullWidth={false}
                              margin="normal"
                              required={false}
                              variant="standard"
                            >
                              <div
                                className="MuiFormControl-root MuiTextField-root makeStyles-picker-6 MuiFormControl-marginNormal"
                              >
                                <WithStyles(ForwardRef(InputLabel))
                                  htmlFor="date-picker-inline"
                                  id="date-picker-inline-label"
                                >
                                  <ForwardRef(InputLabel)
                                    classes={
                                      Object {
                                        "animated": "MuiInputLabel-animated",
                                        "asterisk": "MuiInputLabel-asterisk",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "filled": "MuiInputLabel-filled",
                                        "focused": "Mui-focused",
                                        "formControl": "MuiInputLabel-formControl",
                                        "marginDense": "MuiInputLabel-marginDense",
                                        "outlined": "MuiInputLabel-outlined",
                                        "required": "Mui-required",
                                        "root": "MuiInputLabel-root",
                                        "shrink": "MuiInputLabel-shrink",
                                      }
                                    }
                                    htmlFor="date-picker-inline"
                                    id="date-picker-inline-label"
                                  >
                                    <WithStyles(ForwardRef(FormLabel))
                                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                                      classes={
                                        Object {
                                          "asterisk": "MuiInputLabel-asterisk",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "required": "Mui-required",
                                        }
                                      }
                                      data-shrink={true}
                                      htmlFor="date-picker-inline"
                                      id="date-picker-inline-label"
                                    >
                                      <ForwardRef(FormLabel)
                                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                                        classes={
                                          Object {
                                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                            "colorSecondary": "MuiFormLabel-colorSecondary",
                                            "disabled": "Mui-disabled Mui-disabled",
                                            "error": "Mui-error Mui-error",
                                            "filled": "MuiFormLabel-filled",
                                            "focused": "Mui-focused Mui-focused",
                                            "required": "Mui-required Mui-required",
                                            "root": "MuiFormLabel-root",
                                          }
                                        }
                                        data-shrink={true}
                                        htmlFor="date-picker-inline"
                                        id="date-picker-inline-label"
                                      >
                                        <label
                                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled"
                                          data-shrink={true}
                                          htmlFor="date-picker-inline"
                                          id="date-picker-inline-label"
                                        >
                                          Enter Your Age
                                        </label>
                                      </ForwardRef(FormLabel)>
                                    </WithStyles(ForwardRef(FormLabel))>
                                  </ForwardRef(InputLabel)>
                                </WithStyles(ForwardRef(InputLabel))>
                                <WithStyles(ForwardRef(Input))
                                  autoFocus={false}
                                  endAdornment={
                                    <ForwardRef(WithStyles)
                                      position="end"
                                    >
                                      <ForwardRef(WithStyles)
                                        aria-label="change date"
                                        onClick={[Function]}
                                      >
                                        <KeyboardIcon />
                                      </ForwardRef(WithStyles)>
                                    </ForwardRef(WithStyles)>
                                  }
                                  fullWidth={false}
                                  id="date-picker-inline"
                                  inputRef={
                                    Object {
                                      "current": <input
                                        aria-invalid="false"
                                        class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                        id="date-picker-inline"
                                        type="text"
                                        value="06/14/2015"
                                      />,
                                    }
                                  }
                                  multiline={false}
                                  onChange={[Function]}
                                  value="06/14/2015"
                                >
                                  <ForwardRef(Input)
                                    autoFocus={false}
                                    classes={
                                      Object {
                                        "colorSecondary": "MuiInput-colorSecondary",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "focused": "Mui-focused",
                                        "formControl": "MuiInput-formControl",
                                        "fullWidth": "MuiInput-fullWidth",
                                        "input": "MuiInput-input",
                                        "inputMarginDense": "MuiInput-inputMarginDense",
                                        "inputMultiline": "MuiInput-inputMultiline",
                                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                                        "marginDense": "MuiInput-marginDense",
                                        "multiline": "MuiInput-multiline",
                                        "root": "MuiInput-root",
                                        "underline": "MuiInput-underline",
                                      }
                                    }
                                    endAdornment={
                                      <ForwardRef(WithStyles)
                                        position="end"
                                      >
                                        <ForwardRef(WithStyles)
                                          aria-label="change date"
                                          onClick={[Function]}
                                        >
                                          <KeyboardIcon />
                                        </ForwardRef(WithStyles)>
                                      </ForwardRef(WithStyles)>
                                    }
                                    fullWidth={false}
                                    id="date-picker-inline"
                                    inputRef={
                                      Object {
                                        "current": <input
                                          aria-invalid="false"
                                          class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                          id="date-picker-inline"
                                          type="text"
                                          value="06/14/2015"
                                        />,
                                      }
                                    }
                                    multiline={false}
                                    onChange={[Function]}
                                    value="06/14/2015"
                                  >
                                    <WithStyles(ForwardRef(InputBase))
                                      autoFocus={false}
                                      classes={
                                        Object {
                                          "colorSecondary": "MuiInput-colorSecondary",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "formControl": "MuiInput-formControl",
                                          "fullWidth": "MuiInput-fullWidth",
                                          "input": "MuiInput-input",
                                          "inputMarginDense": "MuiInput-inputMarginDense",
                                          "inputMultiline": "MuiInput-inputMultiline",
                                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                                          "marginDense": "MuiInput-marginDense",
                                          "multiline": "MuiInput-multiline",
                                          "root": "MuiInput-root MuiInput-underline",
                                          "underline": null,
                                        }
                                      }
                                      endAdornment={
                                        <ForwardRef(WithStyles)
                                          position="end"
                                        >
                                          <ForwardRef(WithStyles)
                                            aria-label="change date"
                                            onClick={[Function]}
                                          >
                                            <KeyboardIcon />
                                          </ForwardRef(WithStyles)>
                                        </ForwardRef(WithStyles)>
                                      }
                                      fullWidth={false}
                                      id="date-picker-inline"
                                      inputComponent="input"
                                      inputRef={
                                        Object {
                                          "current": <input
                                            aria-invalid="false"
                                            class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                            id="date-picker-inline"
                                            type="text"
                                            value="06/14/2015"
                                          />,
                                        }
                                      }
                                      multiline={false}
                                      onChange={[Function]}
                                      type="text"
                                      value="06/14/2015"
                                    >
                                      <ForwardRef(InputBase)
                                        autoFocus={false}
                                        classes={
                                          Object {
                                            "adornedEnd": "MuiInputBase-adornedEnd",
                                            "adornedStart": "MuiInputBase-adornedStart",
                                            "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                            "disabled": "Mui-disabled Mui-disabled",
                                            "error": "Mui-error Mui-error",
                                            "focused": "Mui-focused Mui-focused",
                                            "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                            "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                            "input": "MuiInputBase-input MuiInput-input",
                                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                            "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                            "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                            "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                            "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                            "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                            "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                          }
                                        }
                                        endAdornment={
                                          <ForwardRef(WithStyles)
                                            position="end"
                                          >
                                            <ForwardRef(WithStyles)
                                              aria-label="change date"
                                              onClick={[Function]}
                                            >
                                              <KeyboardIcon />
                                            </ForwardRef(WithStyles)>
                                          </ForwardRef(WithStyles)>
                                        }
                                        fullWidth={false}
                                        id="date-picker-inline"
                                        inputComponent="input"
                                        inputRef={
                                          Object {
                                            "current": <input
                                              aria-invalid="false"
                                              class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                              id="date-picker-inline"
                                              type="text"
                                              value="06/14/2015"
                                            />,
                                          }
                                        }
                                        multiline={false}
                                        onChange={[Function]}
                                        type="text"
                                        value="06/14/2015"
                                      >
                                        <div
                                          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                                          onClick={[Function]}
                                        >
                                          <input
                                            aria-invalid={false}
                                            autoFocus={false}
                                            className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                            disabled={false}
                                            id="date-picker-inline"
                                            onAnimationStart={[Function]}
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            required={false}
                                            type="text"
                                            value="06/14/2015"
                                          />
                                          <WithStyles(ForwardRef(InputAdornment))
                                            position="end"
                                          >
                                            <ForwardRef(InputAdornment)
                                              classes={
                                                Object {
                                                  "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                  "filled": "MuiInputAdornment-filled",
                                                  "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                  "marginDense": "MuiInputAdornment-marginDense",
                                                  "positionEnd": "MuiInputAdornment-positionEnd",
                                                  "positionStart": "MuiInputAdornment-positionStart",
                                                  "root": "MuiInputAdornment-root",
                                                }
                                              }
                                              position="end"
                                            >
                                              <div
                                                className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                              >
                                                <WithStyles(ForwardRef(IconButton))
                                                  aria-label="change date"
                                                  onClick={[Function]}
                                                >
                                                  <ForwardRef(IconButton)
                                                    aria-label="change date"
                                                    classes={
                                                      Object {
                                                        "colorInherit": "MuiIconButton-colorInherit",
                                                        "colorPrimary": "MuiIconButton-colorPrimary",
                                                        "colorSecondary": "MuiIconButton-colorSecondary",
                                                        "disabled": "Mui-disabled",
                                                        "edgeEnd": "MuiIconButton-edgeEnd",
                                                        "edgeStart": "MuiIconButton-edgeStart",
                                                        "label": "MuiIconButton-label",
                                                        "root": "MuiIconButton-root",
                                                        "sizeSmall": "MuiIconButton-sizeSmall",
                                                      }
                                                    }
                                                    onClick={[Function]}
                                                  >
                                                    <WithStyles(ForwardRef(ButtonBase))
                                                      aria-label="change date"
                                                      centerRipple={true}
                                                      className="MuiIconButton-root"
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onClick={[Function]}
                                                    >
                                                      <ForwardRef(ButtonBase)
                                                        aria-label="change date"
                                                        centerRipple={true}
                                                        className="MuiIconButton-root"
                                                        classes={
                                                          Object {
                                                            "disabled": "Mui-disabled",
                                                            "focusVisible": "Mui-focusVisible",
                                                            "root": "MuiButtonBase-root",
                                                          }
                                                        }
                                                        disabled={false}
                                                        focusRipple={true}
                                                        onClick={[Function]}
                                                      >
                                                        <button
                                                          aria-label="change date"
                                                          className="MuiButtonBase-root MuiIconButton-root"
                                                          disabled={false}
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onDragLeave={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          onMouseDown={[Function]}
                                                          onMouseLeave={[Function]}
                                                          onMouseUp={[Function]}
                                                          onTouchEnd={[Function]}
                                                          onTouchMove={[Function]}
                                                          onTouchStart={[Function]}
                                                          tabIndex={0}
                                                          type="button"
                                                        >
                                                          <span
                                                            className="MuiIconButton-label"
                                                          >
                                                            <KeyboardIcon>
                                                              <WithStyles(ForwardRef(SvgIcon))>
                                                                <ForwardRef(SvgIcon)
                                                                  classes={
                                                                    Object {
                                                                      "colorAction": "MuiSvgIcon-colorAction",
                                                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                      "colorError": "MuiSvgIcon-colorError",
                                                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                      "root": "MuiSvgIcon-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <svg
                                                                    aria-hidden={true}
                                                                    className="MuiSvgIcon-root"
                                                                    focusable="false"
                                                                    viewBox="0 0 24 24"
                                                                  >
                                                                    <path
                                                                      d="M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
                                                                    />
                                                                    <path
                                                                      d="M0 0h24v24H0z"
                                                                      fill="none"
                                                                    />
                                                                  </svg>
                                                                </ForwardRef(SvgIcon)>
                                                              </WithStyles(ForwardRef(SvgIcon))>
                                                            </KeyboardIcon>
                                                          </span>
                                                          <WithStyles(memo)
                                                            center={true}
                                                          >
                                                            <ForwardRef(TouchRipple)
                                                              center={true}
                                                              classes={
                                                                Object {
                                                                  "child": "MuiTouchRipple-child",
                                                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                                                  "ripple": "MuiTouchRipple-ripple",
                                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                  "root": "MuiTouchRipple-root",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="MuiTouchRipple-root"
                                                              >
                                                                <TransitionGroup
                                                                  childFactory={[Function]}
                                                                  component={null}
                                                                  exit={true}
                                                                />
                                                              </span>
                                                            </ForwardRef(TouchRipple)>
                                                          </WithStyles(memo)>
                                                        </button>
                                                      </ForwardRef(ButtonBase)>
                                                    </WithStyles(ForwardRef(ButtonBase))>
                                                  </ForwardRef(IconButton)>
                                                </WithStyles(ForwardRef(IconButton))>
                                              </div>
                                            </ForwardRef(InputAdornment)>
                                          </WithStyles(ForwardRef(InputAdornment))>
                                        </div>
                                      </ForwardRef(InputBase)>
                                    </WithStyles(ForwardRef(InputBase))>
                                  </ForwardRef(Input)>
                                </WithStyles(ForwardRef(Input))>
                              </div>
                            </ForwardRef(FormControl)>
                          </WithStyles(ForwardRef(FormControl))>
                        </ForwardRef(TextField)>
                      </WithStyles(ForwardRef(TextField))>
                    </Rifm>
                  </KeyboardDateInput>
                  <WithStyles(ForwardRef(Popover))
                    anchorOrigin={
                      Object {
                        "horizontal": "center",
                        "vertical": "bottom",
                      }
                    }
                    onClose={[Function]}
                    open={false}
                    transformOrigin={
                      Object {
                        "horizontal": "center",
                        "vertical": "top",
                      }
                    }
                  >
                    <ForwardRef(Popover)
                      anchorOrigin={
                        Object {
                          "horizontal": "center",
                          "vertical": "bottom",
                        }
                      }
                      classes={
                        Object {
                          "paper": "MuiPopover-paper",
                          "root": "MuiPopover-root",
                        }
                      }
                      onClose={[Function]}
                      open={false}
                      transformOrigin={
                        Object {
                          "horizontal": "center",
                          "vertical": "top",
                        }
                      }
                    >
                      <ForwardRef(Modal)
                        BackdropProps={
                          Object {
                            "invisible": true,
                          }
                        }
                        className="MuiPopover-root"
                        onClose={[Function]}
                        open={false}
                      />
                    </ForwardRef(Popover)>
                  </WithStyles(ForwardRef(Popover))>
                </InlineWrapper>
              </Wrapper>
            </PickerWithState>
            <WithStyles(ForwardRef(Button))
              size="large"
              type="submit"
              variant="contained"
            >
              <ForwardRef(Button)
                classes={
                  Object {
                    "colorInherit": "MuiButton-colorInherit",
                    "contained": "MuiButton-contained",
                    "containedPrimary": "MuiButton-containedPrimary",
                    "containedSecondary": "MuiButton-containedSecondary",
                    "containedSizeLarge": "MuiButton-containedSizeLarge",
                    "containedSizeSmall": "MuiButton-containedSizeSmall",
                    "disableElevation": "MuiButton-disableElevation",
                    "disabled": "Mui-disabled",
                    "endIcon": "MuiButton-endIcon",
                    "focusVisible": "Mui-focusVisible",
                    "fullWidth": "MuiButton-fullWidth",
                    "iconSizeLarge": "MuiButton-iconSizeLarge",
                    "iconSizeMedium": "MuiButton-iconSizeMedium",
                    "iconSizeSmall": "MuiButton-iconSizeSmall",
                    "label": "MuiButton-label",
                    "outlined": "MuiButton-outlined",
                    "outlinedPrimary": "MuiButton-outlinedPrimary",
                    "outlinedSecondary": "MuiButton-outlinedSecondary",
                    "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                    "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                    "root": "MuiButton-root",
                    "sizeLarge": "MuiButton-sizeLarge",
                    "sizeSmall": "MuiButton-sizeSmall",
                    "startIcon": "MuiButton-startIcon",
                    "text": "MuiButton-text",
                    "textPrimary": "MuiButton-textPrimary",
                    "textSecondary": "MuiButton-textSecondary",
                    "textSizeLarge": "MuiButton-textSizeLarge",
                    "textSizeSmall": "MuiButton-textSizeSmall",
                  }
                }
                size="large"
                type="submit"
                variant="contained"
              >
                <WithStyles(ForwardRef(ButtonBase))
                  className="MuiButton-root MuiButton-contained MuiButton-containedSizeLarge MuiButton-sizeLarge"
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  type="submit"
                >
                  <ForwardRef(ButtonBase)
                    className="MuiButton-root MuiButton-contained MuiButton-containedSizeLarge MuiButton-sizeLarge"
                    classes={
                      Object {
                        "disabled": "Mui-disabled",
                        "focusVisible": "Mui-focusVisible",
                        "root": "MuiButtonBase-root",
                      }
                    }
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible"
                    type="submit"
                  >
                    <button
                      className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedSizeLarge MuiButton-sizeLarge"
                      disabled={false}
                      onBlur={[Function]}
                      onDragLeave={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      tabIndex={0}
                      type="submit"
                    >
                      <span
                        className="MuiButton-label"
                      >
                        Enter Now
                      </span>
                      <WithStyles(memo)
                        center={false}
                      >
                        <ForwardRef(TouchRipple)
                          center={false}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child",
                              "childLeaving": "MuiTouchRipple-childLeaving",
                              "childPulsate": "MuiTouchRipple-childPulsate",
                              "ripple": "MuiTouchRipple-ripple",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                              "root": "MuiTouchRipple-root",
                            }
                          }
                        >
                          <span
                            className="MuiTouchRipple-root"
                          >
                            <TransitionGroup
                              childFactory={[Function]}
                              component={null}
                              exit={true}
                            />
                          </span>
                        </ForwardRef(TouchRipple)>
                      </WithStyles(memo)>
                    </button>
                  </ForwardRef(ButtonBase)>
                </WithStyles(ForwardRef(ButtonBase))>
              </ForwardRef(Button)>
            </WithStyles(ForwardRef(Button))>
          </div>
        </ForwardRef(Grid)>
      </WithStyles(ForwardRef(Grid))>
    </form>
  </MuiPickersUtilsProvider>
</AgeGateForm>
`;
